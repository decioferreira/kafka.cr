require "./kafka/*"

module Kafka
  # Returns the librdkafka version as integer.
  def self.version : Int32
    LibKafka.version
  end

  # Returns the librdkafka version as string.
  def self.version_str : String
    String.new(LibKafka.version_str)
  end

  # Retrieve supported debug contexts for use with the "debug"
  # configuration property.
  # Returns comma-separated list of available debugging contexts.
  def self.get_debug_contexts : String
    String.new(LibKafka.get_debug_contexts)
  end

  # Wait for all rd_kafka_t objects to be destroyed.
  def self.wait_destroyed(timeout_ms = 1000) : LibC::Int
    LibKafka.wait_destroyed(timeout_ms)
  end

  # FIXME: only returning first errdesc
  # Returns the full list of error codes.
  def self.get_err_descs : Array(LibKafka::ErrDesc)
    Slice(Pointer(LibKafka::ErrDesc)).new(236).tap { |errdescs|
      LibKafka.get_err_descs(errdescs, out cntp)
    }.compact_map { |errdesc|
      errdesc.null? ? nil : errdesc.value
    }
  end

  # Returns a human readable representation of a kafka error.
  def self.err2str(err : LibKafka::RespErrT) : String
    String.new(LibKafka.err2str(err))
  end

  # Returns the error code name (enum name).
  def self.err2name(err : LibKafka::RespErrT) : String
    String.new(LibKafka.err2name(err))
  end

  # Returns the last error code generated by a legacy API call
  # in the current thread.
  def self.last_error : LibKafka::RespErrT
    LibKafka.last_error
  end

  # Converts the system errno value errnox to a RespErrT
  # error code upon failure from the following functions:
  # - rd_kafka_topic_new()
  # - rd_kafka_consume_start()
  # - rd_kafka_consume_stop()
  # - rd_kafka_consume()
  # - rd_kafka_consume_batch()
  # - rd_kafka_consume_callback()
  # - rd_kafka_consume_queue()
  # - rd_kafka_produce()
  def errno2err(errnox : LibC::Int) : LibKafka::RespErrT
    LibKafka.errno2err
  end

  # Returns the thread-local system errno.
  def errno : LibC::Int
    LibKafka.errno
  end

  # Retrieve the current number of threads in use by librdkafka.
  def thread_cnt : LibC::Int
    LibKafka.thread_cnt
  end

  # Prints a table to fp of all supported configuration properties,
  # their default values as well as a description.
  def conf_properties_show
    # LibKafka.conf_properties_show
  end
end
